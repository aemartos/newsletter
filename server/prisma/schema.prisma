generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PostStatus {
    DRAFT
    PUBLISHED
    DELETED
}

model Post {
    id          String     @id @default(uuid())
    title       String
    slug        String     @unique
    excerpt     String?
    content     String?
    status      PostStatus @default(DRAFT)
    publishedAt DateTime?  @map("published_at") @db.Timestamptz(3)
    schedule    DateTime?  @db.Timestamptz(3)
    readTime    Int?       @map("read_time") // in minutes 
    category    String?
    createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(3)

    emailDelivery EmailDelivery[]

    @@map("posts")
}

model Subscriber {
    id         String   @id @default(uuid())
    email      String   @unique
    subscribed Boolean  @default(true)
    createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

    emailDelivery EmailDelivery[]

    @@map("subscribers")
}

enum DeliveryStatus {
    PENDING
    SENT
    FAILED
}

model EmailDelivery {
    id            String         @id @default(uuid())
    postId        String         @map("post_id")
    subscriberId  String         @map("subscriber_id")
    status        DeliveryStatus @default(PENDING)
    sentAt        DateTime?      @map("sent_at")
    lastError     String?        @map("last_error")
    providerMsgId String?        @map("provider_msg_id")
    createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)

    post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
    subscriber Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

    @@unique([postId, subscriberId])
    @@map("email_deliveries")
}
